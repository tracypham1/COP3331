Readings 
6.5 Unit Testing (functions)
- Unit testing is testing a small unit of a program, typically a function
    - usually conducted by creating a test bench, which is another program whose sole purpose is to test output of function
    - each set of input values is known as a test vector
- assert() is part of #include <cassert> library and prints error message if input is false
    - EX: assert(HrMinToMin(0, 99) == 99); prints error Assertion failed: (HrMinToMin(1, 0) == 60), function main, file main.cpp, line 20
- typically test a dozen noraml cases and ten or so weird cases for vector input on a function requiring 3 integers 
6.6 Unit Testing (classes)
- check classes
    - automatic if cases that print if failed
    - independent cases that set new values rather than check earlier values
    - 100% code coverage enacts all lines of code
    - include normal cases and border cases (extreme high, low, weird values)
- Regression testing is testing again once new object created 
    - if failed a previously passed test, the program has regressed
    - a testbench may be put into its own class like MyClassTest.cpp to keep it modular
    - Regression testing means to check if a change to an item caused previously-passed test cases to fail.
6.7 Preprocessor and include
- The preprocessor scans the entire program to look for a hash symbol(#)
    - each line beginning with a # is a preprocessor directive and ends at the end of the line, no ; needed
    - EX: include directive #include <filename> OR #include "filename"
- the compiler replaces the include filename with the filename contents
- characters outside filename tell compiler where to look for the file
    - EX: " " quotes tell the compiler to look for the .h file in the same directory
    - EX: < > are for standard libraries
6.8 Separate Files
- header file guards are preprocessor directives
    - good practice to guard every header file with 
        - #ifndef HEADER_H - checks if header was already defined
        - #define HEADER_H - defines if not already
        - #endif HEADER_H - skips everything between this and ifndef if HEADER_H already defined
- in C++, header files do NOT need the .h, that is just a good practice
6.9 Separate Files for Classes
- good practice to write out types of classes needed and variables for each, 
    - then test a class before using or writing another