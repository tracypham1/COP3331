Reading
6.1 Variable Name Scope
- a block is a brace enclosed {...} set of statements
- a variable's scope is within the block of code it is declared in
- typicall intialize loop control variable in header of for loop to avoid confusion
6.2 Scope of Variable/Function Definitions
- compilers read from top to bottom
- a side effect is when a function edits a global variable, which go past its parameters and return values
    - try to keep global variables constants
- a function can not declare a local variable with the same name as the parameter >> compiler error
- if function's local variable is same as a global variable, the local variable is used
- order of program: function definitions/prototypes, main, function definitions; note diff bw declaration and definitions
    - function declaration allows call before the actual definitions
6.3 Function Name Overloading
- you can have two functions with diff parameters, but must have same return type!
6.4 Parameter Error Checking
- good practice to check in the function if the parameter passed is withing desired range
6.11 Namespaces
- name conflicts are when classes, variables, etc. have same name and that can cause errors when user calls one 
    - declare that class, variable, etc. withing a namespace to avoid conflict
    - access the class, variable, etc. using the scope resolution operator :: 
    - EX: 
        namespace auditorium{
            class Seat{
                ...
            };
        }

        auditorium::Seat auditoriumSeat;
        airplane::Seat airplaneSeat;
    - EX: a class named Play and a function named Play can cause a conflict
    - EX: an error can still occur in a namespace if the function and/or variable and/or class have the same name
- std namespace 
    - all items in C++ library in the std namespace
        - EX: scope resolution operator(::)
            std::cout << variable OR std::string name;
        - EX: namespace directive
            'using' in 'using namespace std' directs compiler to check std for any names not declared
        - avoid 'using namespace' derivate except for std
6.12 Modular Compilation
- single step compilation compiles files and links them in one step 
    - this can take a very long time, especially if only one file had a small change
    - modular compilatioin compiles source files into object files separately, then links them 
        - object files contain machine instructions for compiled code along with placeholders/references for variablels, classes, and other source files
        - the linker links the object files along with libraries to create the final executable
        - this modular compilation is much faster
        