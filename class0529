Reading
5.19 Operator Overloading
- programmers can redfine operators +,-,/,* to operate on program-defined objects
- EX: overriding the + operators
    TimeHrMn operator+(TimeHrMn rhs);

    TimeHrMn TimeHrMn::operator+(TimeHrMn rhs){
        TimeHrMn timeTotal;

        timeTotal.hours = hours + rhs.hours;
        timeTotal.minutes = minutes + rhs.hours;

        return timeTotal;
    }

    int main(){
        TimeHrMn time1(3, 22);
        TimeHrMn time2(2, 50);
        TimeHrMn timeTot;

        timeTot = time1 + time2; //adds 3+2 and 22+50
    }
//read more into the implicit this operator
- EX: Overloading the + operator multiple times
    TimeHrMn TimeHrMn::operator+(int rhsHours){
        TimeHrMn timeTotal;

        timeTotal.hours = hours + rhsHours;
        timeTotal.minutes = minutes;

        return timeTotal
    }

    int main(){
        timeTot = time1 + 10;
        //this invokes the above function
        //timeTot = 10 + time1 would cause a compiler error
    }
7.2 Pointer Basics
- pointers are variables that contain memory addresses
7.3 Operators: new, delete, and ->
- 'new' allocates memory for a type and returns a pointer to that memory addresses
    - EX: pointerVariable = new type;
    - new returns nullptr is allocating memory failed
    - constructor for the class type is called after memory is allocated
- '->' is the member access operator equivalent to (*a).memberOfA
- 'delete' deallocates memory
    - EX: delete pointerVariable; //deallocates the memory pointerVariable was pointing to
    - common error is dereference variable once memory is deallocated
7.4 Functions with Array Parameter
- Functions have array parameters, which a pointer to the first element of the array is actually how the function will use the array parameter, yeah run on senteneces.
- 'const' before the array parameter to prevent function from modifying parameter
//do challenge activities from here on
7.6 Functions with C String Array Parameter
- string is passed as a char array
- string parameter wont need a second size variable array bc you can use strlen(); char string[] & char* string >> strlen(string)
- passing a c string to a function creates a pointer to the first char
- incriment thru the string as it is a array of type char
7.7 Pass by Reference
- pass by value, means the function copies the value and the varibale in main is not changed after the function exits
- pass by reference with '&' before the variable in the function header changes that varibale in main 
- pass by value is misleading, bc user will think varibale is being updated
- EX: using references &
    int &usrValRef = userValInt;

    cin >> usrValInt;
    //printing userValInt and usrValRef are the same
- EX: reference variable
    double& heightRef = tree;
    heightRef = 12; //this sets tree to 12 as well
7.9 Functions With String/Vector Parameters
- sometimes pass vector and string by reference, regardless of if the function modifies them to save space bc vector/stirng won't be copied locally
- EX: pass a vector by reference and make values not changable
    void ReverseVals(vector<int>& vctrVals)
    void PrintVals(const vector<int>& vcrtVals)

    int main(){
        ReverseVals(userValues);
    }
- in summary
    - strive to use return values
    - define functions parameter as pass by value
    - pass by reference large items of ten or more elements
    - pass by reference, aka use '&' whenever vector or string will be modified
    - EX: pass string as (string& myString) and access characters with {myString.at(i)}
        - get the size using myString.size() bc thats for a vector/array, this is not the actual string but a reference to the char array so u can't use strlen()
7.10 Memory Regions: Heap/Stack
- A program's memory usage usually found in:
    - code: region where program instructions are stored
    - static memory: region where global variables, as well as static local variables (variables declared in a function with 'static' before it,
        - 'static' means the variable will not be changed for the rest of the program execution, allocated once and address does not change) allocated
    - the stack: region a function's local variables are allocated during a function call,
        - this is allocated and deallocated automatically, so its called automatic memory
    - the heap: region where the 'new' operator allocated memory, and where 'delete' deallocates it,
       - the region is also called free stored

class0529
Arrays of Objects
- you need a default constructor to create a vector of objects
this Keyword
- only legal inside member functions (Class::)
- 'this' is a pointer to the entire object in which it is called
- common use is shadowed data members
- EX: if the paramater passed in is called height and so it the private data member, do this->height = height;
How to Overload
- object always has to be on left side of operation
Resrtictions on Overloading
- read more
Operator Chaining
- 

//practice constructors(and alternate format) and destructors on hackerrank or sum

























